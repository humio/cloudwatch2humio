{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "CloudWatch to LogScale Integration for sending CloudWatch Logs and Metrics to LogScale.",
  "Parameters" : {
    "LogScaleProtocol" : {
      "Type" : "String",
      "Description" : "The transport protocol used for delivering log/metric events to LogScale. HTTPS is default and recommended.",
      "Default" : "https"
    },
    "LogScaleHost" : {
      "Type" : "String",
      "Description" : "The host to ship LogScale log/metric events to.",
      "Default" : "cloud.humio.com"
    },
    "LogScaleIngestToken" : {
      "Type" : "String",
      "Description" : "The value of the ingest token for the repository from your LogScale account to ship log/metric events to.",
      "Default" : "",
      "NoEcho" : true
    },
    "LogScaleLambdaLogRetention" : {
      "Type" : "Number",
      "Description" : "The number of days to retain CloudWatch logs for the created lambda functions.",
      "Default": 1
    },
    "EnableCloudWatchLogsAutoSubscription" : {
      "Type" : "String",
      "AllowedValues" : [
        "true",
        "false"
      ],
      "Description" : "Make the log ingester automatically subscribe to new log groups specified with the logs subscription prefix parameter. Set to 'true' to enable.",
      "Default" : "true"
    },
    "CreateCloudTrailForAutoSubscription" :{
      "Type" : "String",
      "AllowedValues" : [
        "true",
        "false"
      ],
      "Description" : "If autosubscription to new logs is desired, but instead of the needed resources (a CloudTrail and a S3 bucket) being created now existing resources can be used instead. To use existing resources set this to 'false'. Note that this parameter is only considered if autosubscription is enabled.",
      "Default" : "true"
    },
    "LogScaleCloudWatchLogsSubscriptionPrefix" : {
      "Type" : "String",
      "Description" : "LogScale will only subscribe using either the backfiller or the autosubscriber to log groups with the prefix specified.",
      "Default" : ""
    },
    "EnableCloudWatchLogsBackfillerAutoRun" : {
      "Type" : "String",
      "AllowedValues" : [
        "true",
        "false"
      ],
      "Description" : "Make the backfiller run automatically when created. Set to 'true' to enable.",
      "Default" : "true"
    },
    "CreateCloudWatchMetricIngesterAndMetricStatisticsIngesterLambdas" : {
      "Type" : "String",
      "AllowedValues" : [
        "true",
        "false"
      ],
      "Description" : "Choose whether the metric ingester and the metric statistics ingester lambdas should be created. These are not necessary for getting CloudWatch logs into LogScale. Set to 'true' to create.",
      "Default" : "false"
    },
    "EnableVPCForIngesterLambdas" : {
      "Type" : "String",
      "AllowedValues" : [
        "true",
        "false"
      ],
      "Description" : "Use a VPC for the lambda ingester functions. Set to 'true' to enable.",
      "Default" : "false"
    },
    "SecurityGroupIds" : {
      "Type" : "CommaDelimitedList",
      "Description" : "A comma separated list of security group ids for the VPC configuration regarding the ingester lambda functions. Only required if VPC is enabled."
    },
    "SubnetIds" : {
      "Type" : "CommaDelimitedList",
      "Description" : "A comma separated list of subnet ids used by the VPC configuration that the ingester lambda functions will be deployed into. Only required if VPC is enabled."
    },
    "LogScaleLambdaLogLevel" : {
      "Type" : "String",
      "AllowedValues" : ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
      "Default" : "INFO",
      "Description" : "The log level printed by the lambda functions when they run. Note that a higher log level will result in more CloudWatch logs."
    },
    "S3BucketContainingLambdaCodeFiles" : {
      "Type" : "String",
      "Description" : "The name of the S3 bucket containing the lambda code files used for the integration. Change this if you want to retrieve the code files from another S3 bucket than the default 'logscale-public-us-east-1'.",
      "Default" : "logscale-public-us-east-1"
    },
    "S3KeyOfTheDeploymentPackageContainingLambdaCodeFiles" : {
      "Type" : "String",
      "Description" : "The name of the S3 key in the S3 bucket containing the lambda code files used for the integration. Change this if you have named the deployment package containing the code files something other than the default 'v2.0.0_cloudwatch2logscale.zip'.",
      "Default" : "v2.0.0_cloudwatch2logscale.zip"
    }
  },
  "Conditions" : {
    "CreateAutoSubscriptionResources" : {
      "Fn::Equals" : [ { "Ref" : "EnableCloudWatchLogsAutoSubscription" }, "true" ]
    },
    "CreateCloudTrailAndS3BucketForAutoSubscription" : {
      "Fn::Equals" : [ { "Ref" : "CreateCloudTrailForAutoSubscription" }, "true" ]
    },
    "CreateCloudTrailAndS3BucketAndEnableAutoSubscription" : {
      "Fn::And" : [
        {
          "Condition": "CreateAutoSubscriptionResources"
        },
        {
          "Condition": "CreateCloudTrailAndS3BucketForAutoSubscription"
        }
      ]
    },
    "CreateLogScaleBackfillerAutoRunner" : {
      "Fn::Equals" : [ { "Ref" : "EnableCloudWatchLogsBackfillerAutoRun" }, "true" ]
    },
    "ConfigureVPCForIngesterLambdas" : {
      "Fn::Equals" : [ { "Ref" : "EnableVPCForIngesterLambdas" }, "true" ]
    },
    "CreateMetricAndMetricStatisticsLambdas" : {
      "Fn::Equals" : [ { "Ref" : "CreateCloudWatchMetricIngesterAndMetricStatisticsIngesterLambdas" }, "true" ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "LogScale Settings" },
          "Parameters" : [ "LogScaleProtocol", "LogScaleHost", "LogScaleIngestToken" ]
        },
        {
          "Label" : { "default" : "VPC Settings"},
          "Parameters" : [ "EnableVPCForIngesterLambdas", "SecurityGroupIds", "SubnetIds" ]
        },
        {
          "Label" : { "default" : "Lambda Settings" },
          "Parameters" : [
            "EnableCloudWatchLogsAutoSubscription",
            "CreateCloudTrailForAutoSubscription",
            "EnableCloudWatchLogsBackfillerAutoRun",
            "LogScaleCloudWatchLogsSubscriptionPrefix",
            "CreateCloudWatchMetricIngesterAndMetricStatisticsIngesterLambdas",
            "S3BucketContainingLambdaCodeFiles",
            "S3KeyOfTheDeploymentPackageContainingLambdaCodeFiles",
            "LogScaleLambdaLogLevel",
            "LogScaleLambdaLogRetention"
          ]
        }
      ]
    }
  },
  "Resources" : {
    "LogScaleCloudWatchRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Action" : "sts:AssumeRole",
              "Principal" : {
                "Service" : [
                  "lambda.amazonaws.com",
                  "apigateway.amazonaws.com",
                  "logs.amazonaws.com"
                ]
              },
              "Effect" : "Allow",
              "Sid" : ""
            }
          ]
        },
        "Policies" : [
          {
            "PolicyName" : "logscale_cloudwatch_role",
            "PolicyDocument" : {
              "Fn::If" : [ "ConfigureVPCForIngesterLambdas",
                {
                  "Version" : "2012-10-17",
                  "Statement" : [
                    {
                      "Effect" : "Allow",
                      "Action" : [
                        "lambda:GetFunction",
                        "lambda:InvokeFunction",
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:DescribeLogGroups",
                        "logs:DescribeLogStreams",
                        "logs:DescribeSubscriptionFilters",
                        "logs:PutSubscriptionFilter",
                        "logs:DeleteSubscriptionFilter",
                        "logs:PutLogEvents",
                        "logs:GetLogEvents",
                        "logs:FilterLogEvents",
                        "cloudwatch:GetMetricData",
                        "cloudwatch:GetMetricStatistics",
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:CreateNetworkInterfacePermission",
                        "ec2:DeleteNetworkInterface",
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject"
                      ],
                      "Resource" : "*"
                    }
                  ]
                },
                {
                  "Version" : "2012-10-17",
                  "Statement" : [
                    {
                      "Effect" : "Allow",
                      "Action" : [
                        "lambda:GetFunction",
                        "lambda:InvokeFunction",
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:DescribeLogGroups",
                        "logs:DescribeLogStreams",
                        "logs:DescribeSubscriptionFilters",
                        "logs:PutSubscriptionFilter",
                        "logs:DeleteSubscriptionFilter",
                        "logs:PutLogEvents",
                        "logs:GetLogEvents",
                        "logs:FilterLogEvents",
                        "cloudwatch:GetMetricData",
                        "cloudwatch:GetMetricStatistics",
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject"
                      ],
                      "Resource" : "*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "LogScaleCloudWatchLambdaZipBucket" : {
      "Type" : "AWS::S3::Bucket"
    },
    "LogScaleCloudWatchCopyZipCustom" : {
      "Type" : "Custom::CopyZip",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : [ "LogScaleCloudWatchCopyZipLambda", "Arn" ] },
        "DestBucket" : { "Ref" : "LogScaleCloudWatchLambdaZipBucket" },
        "SourceBucket" : { "Ref" : "S3BucketContainingLambdaCodeFiles" },
        "Key" : { "Ref" : "S3KeyOfTheDeploymentPackageContainingLambdaCodeFiles" }
      }
    },
    "LogScaleCloudWatchCopyZipLambda" : {
      "DependsOn" : [ "LogScaleCloudWatchRole" ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description" : "Copies objects from a S3 bucket to a destination.",
        "Handler" : "index.handler",
        "Runtime" : "python3.8",
        "Timeout" : "300",
        "Role" : { "Fn::GetAtt": [ "LogScaleCloudWatchRole", "Arn" ] },
        "Code" : {
          "ZipFile" : "import json\nimport logging\nimport os\nimport threading\nimport boto3\nimport cfnresponse\n\nlevel = os.getenv(\"log_level\", \"INFO\")\nlogging.basicConfig(level=level)\nlogger = logging.getLogger()\nlogger.setLevel(level)\n\n\ndef copy_objects(source_bucket, dest_bucket, key):\n    \"\"\"\n    Copy key from source bucket to destination bucket.\n\n    :param source_bucket: S3 bucket containing ZIP file with code.\n    :param dest_bucket: S3 bucket where ZIP file with code should be copied to.\n    :param key: File name to be copied.\n    :return: None\n    \"\"\"\n    s3 = boto3.client('s3')\n    copy_source = {\n        'Bucket': source_bucket,\n        'Key': key\n    }\n    logger.debug(('copy_source: %s' % copy_source))\n    logger.debug(('dest_bucket = %s' % dest_bucket))\n    logger.debug(('key = %s' % key))\n    s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)\n\n\ndef delete_objects(bucket, key):\n    \"\"\"\n    Delete a bucket specified by the key.\n\n    :param bucket: S3 bucket to be deleted.\n    :param key: S3 key to object that should be deleted.\n    :return:\n    \"\"\"\n    s3 = boto3.client('s3')\n    objects = {'Objects': [{'Key': key}]}\n    s3.delete_objects(Bucket=bucket, Delete=objects)\n\n\ndef timeout(event, context):\n    \"\"\"\n    Send a response to the custom resource if it times out.\n\n    :param event: Event data from the Lambda.\n    :param context: Lambda context object.\n    :return: None\n    \"\"\"\n    logging.error('Execution is about to time out, sending failure response to CloudFormation')\n    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)\n\n\ndef handler(event, context):\n    \"\"\"\n    Lambda handler that will copy the ZIP file from the source bucket to the\n    destination bucket.\n\n    It will send a failure to CloudFormation if the function is going to timeout.\n\n    :param event: Event data from caller.\n    :param context: Lambda context object.\n    :return:  None\n    \"\"\"\n    timer = threading.Timer((context.get_remaining_time_in_millis()\n                             / 1000.00) - 0.5, timeout, args=[event, context])\n    timer.start()\n    logger.debug(('Received event: %s' % json.dumps(event)))\n    status = cfnresponse.SUCCESS\n    try:\n        source_bucket = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        key = event['ResourceProperties']['Key']\n        if event['RequestType'] == 'Delete':\n            delete_objects(dest_bucket, key)\n        else:\n            copy_objects(source_bucket, dest_bucket, key)\n    except Exception as e:\n        logging.error('Exception: %s' % e, exc_info=True)\n        status = cfnresponse.FAILED\n    finally:\n        timer.cancel()\n        cfnresponse.send(event, context, status, {}, None)"
        }
      }
    },
    "LogScaleCloudWatchCopyZipLambdaLogGroup" : {
      "DependsOn" : [ "LogScaleCloudWatchRole" ],
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {
          "Fn::Join" : [ "", [ "/aws/lambda/", { "Ref" : "LogScaleCloudWatchCopyZipLambda" } ] ]
        },
        "RetentionInDays" : { "Ref" : "LogScaleLambdaLogRetention" }
      }
    },
    "LogScaleCloudWatchLogsIngester" : {
      "DependsOn" : [ "LogScaleCloudWatchRole", "LogScaleCloudWatchCopyZipCustom" ],
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket" : { "Ref" : "LogScaleCloudWatchLambdaZipBucket" },
          "S3Key" : { "Ref" : "S3KeyOfTheDeploymentPackageContainingLambdaCodeFiles" }
        },
        "Environment" : {
          "Variables" : {
            "logscale_protocol" : { "Ref" : "LogScaleProtocol" },
            "logscale_host" : { "Ref" : "LogScaleHost" },
            "logscale_ingest_token" : { "Ref" : "LogScaleIngestToken" },
            "log_level" : { "Ref" : "LogScaleLambdaLogLevel" }
          }
        },
        "VpcConfig" : {
          "Fn::If" : [ "ConfigureVPCForIngesterLambdas",
            {
              "SecurityGroupIds" : { "Ref" : "SecurityGroupIds" },
              "SubnetIds" : { "Ref" : "SubnetIds" }
            },
            {
              "Ref" : "AWS::NoValue"
            }
          ]
        },
        "Description" : "CloudWatch Logs to LogScale ingester.",
        "Handler" : "logs_ingester.lambda_handler",
        "MemorySize" : "128",
        "Role" : {
          "Fn::GetAtt" : [ "LogScaleCloudWatchRole", "Arn" ]
        },
        "Runtime" : "python3.8",
        "Timeout" : "300"
      }
    },
    "LogScaleCloudWatchLogsIngesterPermission" : {
      "Type" : "AWS::Lambda::Permission",
      "Properties" : {
        "Action" : "lambda:InvokeFunction",
        "FunctionName" : {
          "Fn::GetAtt" : [ "LogScaleCloudWatchLogsIngester", "Arn" ]
        },
        "Principal" : "logs.amazonaws.com"
      }
    },
    "LogScaleCloudWatchLogsIngesterLogGroup" : {
      "DependsOn" : [ "LogScaleCloudWatchRole" ],
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {
          "Fn::Join" : [ "", [ "/aws/lambda/", { "Ref" : "LogScaleCloudWatchLogsIngester" } ] ]
        },
        "RetentionInDays" : { "Ref" : "LogScaleLambdaLogRetention" }
      }
    },
    "LogScaleCloudWatchLogsSubscriber" : {
      "DependsOn" : [ "LogScaleCloudWatchRole", "LogScaleCloudWatchCopyZipCustom" ],
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket" : { "Ref" : "LogScaleCloudWatchLambdaZipBucket" },
          "S3Key" : { "Ref" : "S3KeyOfTheDeploymentPackageContainingLambdaCodeFiles" }
        },
        "Environment" : {
          "Variables" : {
            "logscale_log_ingester_arn" : {
              "Fn::GetAtt" : [ "LogScaleCloudWatchLogsIngester", "Arn" ]
            },
            "logscale_subscription_prefix" : { "Ref" : "LogScaleCloudWatchLogsSubscriptionPrefix" },
            "log_level" : { "Ref" : "LogScaleLambdaLogLevel" }
          }
        },
        "Description" : "CloudWatch Logs to LogScale log group subscriber.",
        "Handler" : "logs_subscriber.lambda_handler",
        "MemorySize" : "128",
        "Role" : {
          "Fn::GetAtt" : [ "LogScaleCloudWatchRole", "Arn" ]
        },
        "Runtime" : "python3.8",
        "Timeout" : "300"
      }
    },
    "LogScaleCloudWatchLogsSubscriberPermission" : {
      "Condition" : "CreateAutoSubscriptionResources",
      "Type" : "AWS::Lambda::Permission",
      "Properties" : {
        "Action" : "lambda:InvokeFunction",
        "FunctionName" : { "Fn::GetAtt" : [ "LogScaleCloudWatchLogsSubscriber", "Arn" ] },
        "Principal" : "events.amazonaws.com",
        "SourceAccount" : { "Ref" : "AWS::AccountId" },
        "SourceArn" : { "Fn::GetAtt" : [ "LogScaleCloudWatchLogsSubscriberEventRule", "Arn" ] }
      }
    },
    "LogScaleCloudWatchLogsSubscriberLogGroup" : {
      "DependsOn" : [ "LogScaleCloudWatchRole" ],
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {
          "Fn::Join" : [ "", [ "/aws/lambda/", { "Ref" : "LogScaleCloudWatchLogsSubscriber" } ] ]
        },
        "RetentionInDays" : { "Ref" : "LogScaleLambdaLogRetention" }
      }
    },
    "LogScaleCloudWatchLogsBackfiller" : {
      "DependsOn" : [ "LogScaleCloudWatchRole", "LogScaleCloudWatchCopyZipCustom" ],
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket" : { "Ref" : "LogScaleCloudWatchLambdaZipBucket" },
          "S3Key" : { "Ref" : "S3KeyOfTheDeploymentPackageContainingLambdaCodeFiles" }
        },
        "Environment" : {
          "Variables" : {
            "logscale_log_ingester_arn" : {
              "Fn::GetAtt" : [ "LogScaleCloudWatchLogsIngester", "Arn" ]
            },
            "logscale_subscription_prefix" : { "Ref" : "LogScaleCloudWatchLogsSubscriptionPrefix" },
            "logscale_protocol" : { "Ref" : "LogScaleProtocol" },
            "logscale_host" : { "Ref" : "LogScaleHost" },
            "logscale_ingest_token" : { "Ref" : "LogScaleIngestToken" },
            "log_level" : { "Ref" : "LogScaleLambdaLogLevel" }
          }
        },
        "Description" : "CloudWatch Logs to LogScale logs backfiller.",
        "Handler" : "logs_backfiller.lambda_handler",
        "MemorySize" : "128",
        "Role" : {
          "Fn::GetAtt" : [ "LogScaleCloudWatchRole", "Arn" ]
        },
        "Runtime" : "python3.8",
        "Timeout" : "300"
      }
    },
    "LogScaleCloudWatchLogsBackfillerLogGroup" : {
      "DependsOn" : [ "LogScaleCloudWatchRole" ],
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {
          "Fn::Join" : [ "", [ "/aws/lambda/", { "Ref" : "LogScaleCloudWatchLogsBackfiller" } ] ]
        },
        "RetentionInDays" : { "Ref" : "LogScaleLambdaLogRetention" }
      }
    },
    "LogScaleBackfillerAutoRunner" : {
      "Condition" : "CreateLogScaleBackfillerAutoRunner",
      "DependsOn" : [ "LogScaleCloudWatchLogsBackfiller" ],
      "Type" : "Custom::BackfillerAutoRunner",
      "Properties" : {
        "ServiceToken" : { "Fn::GetAtt" : [ "LogScaleCloudWatchLogsBackfiller", "Arn" ] },
        "StackName" : { "Ref" : "AWS::StackName" }
      }
    },
    "LogScaleCloudWatchLogsSubscriberS3Bucket" : {
      "Condition" : "CreateCloudTrailAndS3BucketAndEnableAutoSubscription",
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "BucketOwnerFullControl",
        "BucketName" : {
          "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "logscale", "cloudtrail" ] ]
        }
      }
    },
    "LogScaleCloudWatchLogsSubscriberS3BucketPolicy" : {
      "Condition" : "CreateCloudTrailAndS3BucketAndEnableAutoSubscription",
      "DependsOn" : [ "LogScaleCloudWatchLogsSubscriberS3Bucket" ],
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : { "Ref" : "LogScaleCloudWatchLogsSubscriberS3Bucket" },
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Sid" : "AWSCloudTrailAclCheck20150319",
              "Effect" : "Allow",
              "Principal" : {
                "Service" : "cloudtrail.amazonaws.com"
              },
              "Action" : "s3:GetBucketAcl",
              "Resource" : {
                "Fn::GetAtt" : [ "LogScaleCloudWatchLogsSubscriberS3Bucket", "Arn" ]
              }
            },
            {
              "Sid" : "AWSCloudTrailWrite20150319",
              "Effect" : "Allow",
              "Principal" : {
                "Service" : "cloudtrail.amazonaws.com"
              },
              "Action" : "s3:PutObject",
              "Resource" : {
                "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "LogScaleCloudWatchLogsSubscriberS3Bucket", "Arn" ] }, "/AWSLogs/", { "Ref" : "AWS::AccountId" }, "/*" ] ]
              },
              "Condition" : {
                "StringEquals" : { "s3:x-amz-acl" : "bucket-owner-full-control" }
              }
            }
          ]
        }
      }
    },
    "LogScaleCloudWatchLogsSubscriberCloudTrail" : {
      "Condition" : "CreateCloudTrailAndS3BucketAndEnableAutoSubscription",
      "DependsOn" : [ "LogScaleCloudWatchLogsSubscriberS3BucketPolicy" ],
      "Type" : "AWS::CloudTrail::Trail",
      "Properties" : {
        "EnableLogFileValidation" : false,
        "IncludeGlobalServiceEvents" : true,
        "IsMultiRegionTrail" : true,
        "IsLogging" : true,
        "S3BucketName" : {
          "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "logscale", "cloudtrail" ] ]
        },
        "TrailName" : {
          "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "logscale", { "Ref" : "AWS::AccountId" } ] ]
        }
      }
    },
    "LogScaleCloudWatchLogsSubscriberEventRule" : {
      "Condition" : "CreateAutoSubscriptionResources",
      "DependsOn" : [ "LogScaleCloudWatchLogsSubscriber" ],
      "Type" : "AWS::Events::Rule",
      "Properties" : {
        "Description" : "LogScale log group auto subscription event rule.",
        "EventPattern" : {
          "source" : [ "aws.logs" ],
          "detail-type" : [ "AWS API Call via CloudTrail" ],
          "detail" : {
            "eventSource" : [ "logs.amazonaws.com" ],
            "eventName" : [ "CreateLogGroup" ]
          }
        },
        "Name" : {
          "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "logscale-auto-subscription-rule" ] ]
        },
        "Targets" : [
          {
            "Id" : {
              "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "logscale-auto-subscription-rule" ] ]
            },
            "Arn" : {
              "Fn::GetAtt" : [ "LogScaleCloudWatchLogsSubscriber", "Arn" ]
            }
          }
        ]
      }
    },
    "LogScaleCloudWatchMetricIngester" : {
      "Condition" : "CreateMetricAndMetricStatisticsLambdas",
      "DependsOn" : [ "LogScaleCloudWatchRole", "LogScaleCloudWatchCopyZipCustom" ],
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket" : { "Ref" : "LogScaleCloudWatchLambdaZipBucket" },
          "S3Key" : { "Ref" : "S3KeyOfTheDeploymentPackageContainingLambdaCodeFiles" }
        },
        "Environment" : {
          "Variables" : {
            "logscale_protocol" : { "Ref" : "LogScaleProtocol" },
            "logscale_host" : { "Ref" : "LogScaleHost" },
            "logscale_ingest_token" : { "Ref" : "LogScaleIngestToken" },
            "log_level" : { "Ref" : "LogScaleLambdaLogLevel" }
          }
        },
        "VpcConfig" : {
          "Fn::If" : [ "ConfigureVPCForIngesterLambdas",
            {
              "SecurityGroupIds" : { "Ref" : "SecurityGroupIds" },
              "SubnetIds" : { "Ref" : "SubnetIds" }
            },
            {
              "Ref" : "AWS::NoValue"
            }
          ]
        },
        "Description" : "CloudWatch Metrics to LogScale ingester.",
        "Handler" : "metric_ingester.lambda_handler",
        "MemorySize" : "128",
        "Role" : {
          "Fn::GetAtt" : [ "LogScaleCloudWatchRole", "Arn" ]
        },
        "Runtime" : "python3.8",
        "Timeout" : "300"
      }
    },
    "LogScaleCloudWatchMetricIngesterLogGroup" : {
      "Condition" : "CreateMetricAndMetricStatisticsLambdas",
      "DependsOn" : [ "LogScaleCloudWatchRole" ],
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {
          "Fn::Join" : [ "", [ "/aws/lambda/", { "Ref" : "LogScaleCloudWatchMetricIngester" } ] ]
        },
        "RetentionInDays" : { "Ref" : "LogScaleLambdaLogRetention" }
      }
    },
    "LogScaleCloudWatchMetricStatisticsIngester" : {
      "Condition" : "CreateMetricAndMetricStatisticsLambdas",
      "DependsOn" : [ "LogScaleCloudWatchRole", "LogScaleCloudWatchCopyZipCustom" ],
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "S3Bucket" : { "Ref" : "LogScaleCloudWatchLambdaZipBucket" },
          "S3Key" : { "Ref" : "S3KeyOfTheDeploymentPackageContainingLambdaCodeFiles" }
        },
        "Environment" : {
          "Variables" : {
            "logscale_protocol" : { "Ref" : "LogScaleProtocol" },
            "logscale_host" : { "Ref" : "LogScaleHost" },
            "logscale_ingest_token" : { "Ref" : "LogScaleIngestToken" },
            "log_level" : { "Ref" : "LogScaleLambdaLogLevel" }
          }
        },
        "VpcConfig" : {
          "Fn::If" : [ "ConfigureVPCForIngesterLambdas",
            {
              "SecurityGroupIds" : { "Ref" : "SecurityGroupIds" },
              "SubnetIds" : { "Ref" : "SubnetIds" }
            },
            {
              "Ref" : "AWS::NoValue"
            }
          ]
        },
        "Description" : "CloudWatch Metrics Statistics to LogScale ingester.",
        "Handler" : "metric_statistics_ingester.lambda_handler",
        "MemorySize" : "128",
        "Role" : {
          "Fn::GetAtt" : [ "LogScaleCloudWatchRole", "Arn" ]
        },
        "Runtime" : "python3.8",
        "Timeout" : "300"
      }
    },
    "LogScaleCloudWatchMetricStatisticsIngesterLogGroup" : {
      "Condition" : "CreateMetricAndMetricStatisticsLambdas",
      "DependsOn" : [ "LogScaleCloudWatchRole" ],
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {
          "Fn::Join" : [ "", [ "/aws/lambda/", { "Ref" : "LogScaleCloudWatchMetricStatisticsIngester" } ] ]
        },
        "RetentionInDays" : { "Ref" : "LogScaleLambdaLogRetention" }
      }
    }
  }
}
